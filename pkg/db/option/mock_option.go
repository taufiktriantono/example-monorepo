// Code generated by MockGen. DO NOT EDIT.
// Source: option.go
//
// Generated by this command:
//
//	mockgen -source=option.go -destination=mock_option.go -package=option
//

// Package option is a generated GoMock package.
package option

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockQueryOption is a mock of QueryOption interface.
type MockQueryOption struct {
	ctrl     *gomock.Controller
	recorder *MockQueryOptionMockRecorder
	isgomock struct{}
}

// MockQueryOptionMockRecorder is the mock recorder for MockQueryOption.
type MockQueryOptionMockRecorder struct {
	mock *MockQueryOption
}

// NewMockQueryOption creates a new mock instance.
func NewMockQueryOption(ctrl *gomock.Controller) *MockQueryOption {
	mock := &MockQueryOption{ctrl: ctrl}
	mock.recorder = &MockQueryOptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryOption) EXPECT() *MockQueryOptionMockRecorder {
	return m.recorder
}

// Apply mocks base method.
func (m *MockQueryOption) Apply(arg0 *gorm.DB) *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Apply", arg0)
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// Apply indicates an expected call of Apply.
func (mr *MockQueryOptionMockRecorder) Apply(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Apply", reflect.TypeOf((*MockQueryOption)(nil).Apply), arg0)
}
