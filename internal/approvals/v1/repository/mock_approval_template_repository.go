// Code generated by MockGen. DO NOT EDIT.
// Source: approval_template_repository.go
//
// Generated by this command:
//
//	mockgen -source=approval_template_repository.go -destination=mock_approval_template_repository.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	domain "github.com/taufiktriantono/api-first-monorepo/internal/approvals/v1/domain"
	option "github.com/taufiktriantono/api-first-monorepo/pkg/db/option"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockApprovalTemplateRepository is a mock of ApprovalTemplateRepository interface.
type MockApprovalTemplateRepository struct {
	ctrl     *gomock.Controller
	recorder *MockApprovalTemplateRepositoryMockRecorder
	isgomock struct{}
}

// MockApprovalTemplateRepositoryMockRecorder is the mock recorder for MockApprovalTemplateRepository.
type MockApprovalTemplateRepositoryMockRecorder struct {
	mock *MockApprovalTemplateRepository
}

// NewMockApprovalTemplateRepository creates a new mock instance.
func NewMockApprovalTemplateRepository(ctrl *gomock.Controller) *MockApprovalTemplateRepository {
	mock := &MockApprovalTemplateRepository{ctrl: ctrl}
	mock.recorder = &MockApprovalTemplateRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApprovalTemplateRepository) EXPECT() *MockApprovalTemplateRepositoryMockRecorder {
	return m.recorder
}

// Count mocks base method.
func (m *MockApprovalTemplateRepository) Count(ctx context.Context, f *domain.ApprovalTemplate) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, f)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockApprovalTemplateRepositoryMockRecorder) Count(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockApprovalTemplateRepository)(nil).Count), ctx, f)
}

// Create mocks base method.
func (m *MockApprovalTemplateRepository) Create(ctx context.Context, resource *domain.ApprovalTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockApprovalTemplateRepositoryMockRecorder) Create(ctx, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockApprovalTemplateRepository)(nil).Create), ctx, resource)
}

// Delete mocks base method.
func (m *MockApprovalTemplateRepository) Delete(ctx context.Context, resourceID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, resourceID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockApprovalTemplateRepositoryMockRecorder) Delete(ctx, resourceID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockApprovalTemplateRepository)(nil).Delete), ctx, resourceID)
}

// Find mocks base method.
func (m *MockApprovalTemplateRepository) Find(ctx context.Context, f *domain.ApprovalTemplate, opts ...option.QueryOption) ([]*domain.ApprovalTemplate, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, f}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Find", varargs...)
	ret0, _ := ret[0].([]*domain.ApprovalTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockApprovalTemplateRepositoryMockRecorder) Find(ctx, f any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, f}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockApprovalTemplateRepository)(nil).Find), varargs...)
}

// FindOne mocks base method.
func (m *MockApprovalTemplateRepository) FindOne(ctx context.Context, f *domain.ApprovalTemplate) (*domain.ApprovalTemplate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", ctx, f)
	ret0, _ := ret[0].(*domain.ApprovalTemplate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne.
func (mr *MockApprovalTemplateRepositoryMockRecorder) FindOne(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockApprovalTemplateRepository)(nil).FindOne), ctx, f)
}

// Update mocks base method.
func (m *MockApprovalTemplateRepository) Update(ctx context.Context, resourceID string, resource *domain.ApprovalTemplate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, resourceID, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockApprovalTemplateRepositoryMockRecorder) Update(ctx, resourceID, resource any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockApprovalTemplateRepository)(nil).Update), ctx, resourceID, resource)
}

// WithTrx mocks base method.
func (m *MockApprovalTemplateRepository) WithTrx(tx *gorm.DB) ApprovalTemplateRepository {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTrx", tx)
	ret0, _ := ret[0].(ApprovalTemplateRepository)
	return ret0
}

// WithTrx indicates an expected call of WithTrx.
func (mr *MockApprovalTemplateRepositoryMockRecorder) WithTrx(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTrx", reflect.TypeOf((*MockApprovalTemplateRepository)(nil).WithTrx), tx)
}
